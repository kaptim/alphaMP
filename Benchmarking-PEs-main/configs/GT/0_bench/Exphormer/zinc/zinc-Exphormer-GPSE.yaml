# Original:  zinc-GRIT-2000.yaml
out_dir: results
metric_best: mae
metric_agg: argmin
tensorboard_each_run: True  # Log to Tensorboard each run
accelerator: "cuda:0"
repeat: 4
mlflow:
  use: False
  project: Exp
  name: zinc-Exphormer-GPSE
wandb:
  use: True
  project: "PEGT"
  name: "ZINC-Exphormer-GPSE"
  entity: jiaqing
dataset:
  format: PyG-ZINC
  name: subset
  task: graph
  task_type: regression
  transductive: False
  node_encoder: True
  node_encoder_name: TypeDictNode+GPSE
  node_encoder_num_types: 21 # actually 21 in Zinc-12k, 28 in Zinc-full
  node_encoder_bn: False
  edge_encoder: True
  edge_encoder_name: TypeDictEdge
  edge_encoder_num_types: 4
  edge_encoder_bn: False
prep:
  add_edge_index: True
  num_virt_node: 0
  use_exp_edges: False
  exp: True
  exp_deg: 5
posenc_GPSE:
  enable: true
  rand_type: NormalSE
  model_dir: /itet-stor/jiaxie/net_scratch/pe4gt/pretrained/gpse_model_molpcba_1.0.pt
  dim_pe: 32
  use_repr: true
  repr_type: no_post_mp
  model: mlp
  layers: 2
  virtual_node: true
  input_dropout_be: 0.5
  input_dropout_ae: 0.0
  raw_norm_type: BatchNorm
  gnn_cfg:
    head: inductive_hybrid_multi
    layers_pre_mp: 1
    layers_mp: 20
    layers_post_mp: 2
    dim_inner: 512
    layer_type: resgatedgcnconv
    multi_head_dim_inner: 32  # use dim_inner if None
    stage_type: skipsum
    batchnorm: true
    act: relu
    dropout: 0.2
    agg: mean
    normalize_adj: false
train:
  mode: custom
  batch_size: 32
  eval_period: 1
  enable_ckpt: True  # Checkpointing can now be disabled to save I/O when e.g. just benchmarking.
  ckpt_best: True  # WARNING: Checkpoint every epoch a better model is found may increase I/O significantly.
  ckpt_clean: True # Delete old ckpt each time.
model:
  type: MultiModel
  loss_fun: l1
  edge_decoding: dot
  graph_pooling: add
gt:
  layer_type: CustomGatedGCN+Exphormer
  layers: 4
  n_heads: 4
  dim_hidden: 64  # `gt.dim_hidden` must match `gnn.dim_inner`
  dropout: 0.0
  attn_dropout: 0.5
  layer_norm: False
  batch_norm: True
gnn: # decoder --> san_graph = MLP + pooling
  head: san_graph
  layers_pre_mp: 0
  layers_post_mp: 3  # Not used when `gnn.head: san_graph`
  dim_inner: 64  # `gt.dim_hidden` must match `gnn.dim_inner`
  batchnorm: True
  act: relu
  dropout: 0.0
  agg: mean
  normalize_adj: False
optim:
  clip_grad_norm: True
  optimizer: adamW
  weight_decay: 1e-5
  base_lr: 1e-3
  max_epoch: 1500
  num_warmup_epochs: 50
  scheduler: cosine_with_warmup
  min_lr: 1e-6
