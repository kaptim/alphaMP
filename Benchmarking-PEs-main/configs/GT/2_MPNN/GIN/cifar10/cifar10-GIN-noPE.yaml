out_dir: results
metric_best: accuracy
tensorboard_each_run: False  # Log to Tensorboard each run
accelerator: "cuda:0"
# repeat: 4
num_workers: 4
mlflow:
  use: False
  project: async_pe
  name: CIFAR10-GIN-noPE
wandb:
  use: True
  project: async_pe
  name: "CIFAR10-GIN-noPE"
  entity: tkrappel-eth-zurich
dataset:
  dir: ../datasets
  format: PyG-GNNBenchmarkDataset
  name: CIFAR10
  task: graph
  task_type: classification
  transductive: False
  node_encoder: True
  node_encoder_name: LinearNode #+EquivStableLapPE
  node_encoder_bn: False
  edge_encoder: True
  edge_encoder_name: LinearEdge
  edge_encoder_bn: False
  centrality_min: 0
  centrality_max: 0.25 # needs to be set to correctly reflect the dataset
posenc_EquivStableLapPE:
  enable: False
  eigen:
    laplacian_norm: none
    eigvec_norm: L2
    max_freqs: 8
  raw_norm_type: none
train:
  mode: custom
  batch_size: 32
  eval_period: 1
  ckpt_period: 100
model:
  type: custom_gnn
  loss_fun: cross_entropy
  edge_decoding: dot
  graph_pooling: mean
  alpha: 1.0 # synchronous: 1.0, higher alpha -> update more nodes in one iteration
  alpha_node_flag: a # inference (nodes): a: use alpha values, p: bernoulli (as in training), n: synchronous update
  alpha_edge_flag: a # inference (edges): a: average of end nodes, m: maximum alpha of the two end nodes
  centrality_range: 0.0 # 0: no centrality information considered
  use_coloring: False
gnn:
  head: default
  layers_pre_mp: 0
  layers_mp: 4
  layers_post_mp: 2
  dim_inner: 52  # `gt.dim_hidden` must match `gnn.dim_inner`
  batchnorm: True
  layer_type: gin_conv
  act: relu
  dropout: 0.0
  agg: mean
  normalize_adj: False
optim:
  clip_grad_norm: True
  optimizer: adamW
  weight_decay: 1e-5
  base_lr: 0.001
  max_epoch: 150
  scheduler: cosine_with_warmup
  num_warmup_epochs: 5