out_dir: results
metric_best: accuracy
tensorboard_each_run: True  # Log to Tensorboard each run
accelerator: "cuda:0"
repeat: 4
num_workers: 4
mlflow:
  use: False
  project: Exp
  name: CLUSTER-GPS-RWSE
wandb:
  use: True
  project: "PEGT"
  name: "CLUSTER-GPS-RWSE"
  entity: jiaqing
dataset:
  pe_transform_on_the_fly: False # compute PE on the fly to save memory when launching many experiments in parallel
  format: PyG-GNNBenchmarkDataset
  name: CLUSTER
  task: graph
  task_type: classification
  transductive: False
  node_encoder: True
  node_encoder_name: LinearNode+RWSE
  node_encoder_bn: False
  edge_encoder: True
  edge_encoder_name: DummyEdge
  edge_encoder_bn: False
posenc_RWSE:
  enable: True
  kernel:
    times_func: range(1,21)
  model: Linear
  dim_pe: 16
  raw_norm_type: BatchNorm
train:
  mode: custom
  batch_size: 16
  eval_period: 1
  ckpt_period: 100
model:
  type: GPSModel
  loss_fun: weighted_cross_entropy
  edge_decoding: dot
gt:  # Hyperparameters optimized for ~500k budget.
  layer_type: CustomGatedGCN+Transformer
  layers: 16
  n_heads: 8
  dim_hidden: 48  # `gt.dim_hidden` must match `gnn.dim_inner`
  dropout: 0.01
  attn_dropout: 0.5
  layer_norm: False
  batch_norm: True
gnn:
  head: inductive_node
  layers_pre_mp: 0
  layers_post_mp: 3
  dim_inner: 48  # `gt.dim_hidden` must match `gnn.dim_inner`
  batchnorm: True
  act: relu
  dropout: 0.0
  agg: mean
  normalize_adj: False
#optim:
#  clip_grad_norm: True
#  optimizer: adamW
#  weight_decay: 0.0
#  base_lr: 0.0005
#  max_epoch: 1000
#  scheduler: reduce_on_plateau
#  reduce_factor: 0.5
#  schedule_patience: 10
#  min_lr: 1e-5
optim:
  clip_grad_norm: True
  optimizer: adamW
  weight_decay: 1e-5
  base_lr: 0.001
  max_epoch: 100
  scheduler: cosine_with_warmup
  num_warmup_epochs: 5
